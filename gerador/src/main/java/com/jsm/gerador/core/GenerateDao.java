/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.jsm.gerador.core;

import java.util.Scanner;

/**
 *
 * @author MOISES
 */
public class GenerateDao {

    private final String pacote = "dao";
    private final String pacoteRaiz = Config.getPACOTE_RAIZ();
    Scanner sc = new Scanner(System.in);
    private final String pacoteCompleto; 

    public GenerateDao() {       
        pacoteCompleto = pacoteRaiz.concat(".").concat(pacote);
    }

    public void gerarDao() {
        System.out.println("//###############################################################################################");
        System.out.println("//####################### GERANDO CLASSE DAO ####################################################");
        System.out.println("//###############################################################################################\n");
        String codigo = "/*\n"
                + " * To change this license header, choose License Headers in Project Properties.\n"
                + " * To change this template file, choose Tools | Templates\n"
                + " * and open the template in the editor.\n"
                + " */\n"
                + "package " + pacoteRaiz.concat(".").concat(pacote) + ";\n"
                + "\n"
                + "import " + pacoteRaiz + ".interfaces.InterfaceDao;\n"
                + "import " + pacoteRaiz + ".util.FacesUtil;\n"
                + "import " + pacoteRaiz + ".util.HibernateUtil;\n"
                + "import java.io.Serializable;\n"
                + "import java.util.List;\n"
                + "import org.hibernate.Criteria;\n"
                + "import org.hibernate.SQLQuery;\n"
                + "import org.hibernate.Session;\n"
                + "import org.hibernate.Transaction;\n"
                + "import org.hibernate.criterion.DetachedCriteria;\n"
                + "import org.hibernate.criterion.Order;\n"
                + "\n"
                + "/**\n"
                + " *\n"
                + " * @author Moises\n"
                + " */\n"
                + "public class Dao<T> implements InterfaceDao<T>, Serializable {\n"
                + "\n"
                + "    private static final Long SerialVersionUID = 1L;\n"
                + "    private Class<T> classe;\n"
                + "\n"
                + "    public Dao(Class<T> classe) {\n"
                + "        this.classe = classe;\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public boolean save(T entity) {\n"
                + "        Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n"
                + "        Transaction tx = session.getTransaction();\n"
                + "        try {\n"
                + "\n"
                + "            tx.begin();\n"
                + "\n"
                + "            session.saveOrUpdate(entity);\n"
                + "            tx.commit();\n"
                + "            FacesUtil.addInfoMessage(\"Salvo com sucesso!!\");\n"
                + "            return true;\n"
                + "        } catch (Exception e) {\n"
                + "            try {\n"
                + "                tx.rollback();\n"
                + "            } catch (Exception e2) {\n"
                + "                FacesUtil.addInfoMessage(\"Não foi possivel desfazer a transação!!!\" + e2.getCause());\n"
                + "            }\n"
                + "\n"
                + "            FacesUtil.addInfoMessage(\"Erro ao salvar!!!\" + e.getCause());\n"
                + "            return false;\n"
                + "        } finally {\n"
                + "            if (session.isOpen()) {\n"
                + "                if (tx.isActive()) {\n"
                + "\n"
                + "                }\n"
                + "                session.close();\n"
                + "            }\n"
                + "        }\n"
                + "\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public boolean saveOrUpdate(T entity) {\n"
                + "        Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n"
                + "        try {\n"
                + "\n"
                + "            session.getTransaction().begin();\n"
                + "            session.saveOrUpdate(entity);\n"
                + "            session.getTransaction().commit();\n"
                + "            FacesUtil.addInfoMessage(\"Salvo com sucesso!!\");\n"
                + "            return true;\n"
                + "        } catch (Exception e) {\n"
                + "            session.getTransaction().rollback();\n"
                + "            FacesUtil.addInfoMessage(\"Erro ao salvar!!!\" + e.getCause());\n"
                + "            return false;\n"
                + "        } finally {\n"
                + "            if (session.isOpen()) {\n"
                + "                session.close();\n"
                + "            }\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public boolean update(T entity) {\n"
                + "        Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n"
                + "        try {\n"
                + "\n"
                + "            session.getTransaction().begin();\n"
                + "            session.update(entity);\n"
                + "            session.getTransaction().commit();\n"
                + "            FacesUtil.addInfoMessage(\"Atualizado com sucesso!!\");\n"
                + "            return true;\n"
                + "        } catch (Exception e) {\n"
                + "            session.getTransaction().rollback();\n"
                + "            FacesUtil.addInfoMessage(\"Erro ao atualizar!!!\" + e);\n"
                + "            return false;\n"
                + "        } finally {\n"
                + "            if (session.isOpen()) {\n"
                + "                session.close();\n"
                + "            }\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public boolean remove(T entity) {\n"
                + "        Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n"
                + "        try {\n"
                + "\n"
                + "            session.getTransaction().begin();\n"
                + "            session.delete(entity);\n"
                + "            session.getTransaction().commit();\n"
                + "            FacesUtil.addInfoMessage(\"Removido com sucesso!!\");\n"
                + "            return true;\n"
                + "        } catch (Exception e) {\n"
                + "            session.getTransaction().rollback();\n"
                + "            FacesUtil.addInfoMessage(\"Erro ao remover!!!\" + e);\n"
                + "            return false;\n"
                + "        } finally {\n"
                + "            if (session.isOpen()) {\n"
                + "                session.close();\n"
                + "            }\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public boolean merge(T entity) {\n"
                + "        Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n"
                + "        try {\n"
                + "\n"
                + "            session.getTransaction().begin();\n"
                + "            session.merge(entity);\n"
                + "            session.getTransaction().commit();\n"
                + "            FacesUtil.addInfoMessage(\"Sincronizado com sucesso!!\");\n"
                + "            return true;\n"
                + "        } catch (Exception e) {\n"
                + "            session.getTransaction().rollback();\n"
                + "            FacesUtil.addInfoMessage(\"Erro ao sincronizar!!!\" + e);\n"
                + "            return false;\n"
                + "        } finally {\n"
                + "            if (session.isOpen()) {\n"
                + "                session.close();\n"
                + "            }\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public T getEntityById(Serializable id) {\n"
                + "        Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n"
                + "        try {\n"
                + "            session.getTransaction().begin();\n"
                + "            T entity = (T) session.get(classe, id);\n"
                + "            return entity;\n"
                + "        } catch (Exception e) {\n"
                + "            return null;\n"
                + "        } finally {\n"
                + "            session.getTransaction().commit();\n"
                + "            if (session.isOpen()) {\n"
                + "                session.close();\n"
                + "            }\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public T getEntityByDetachedCriteria(DetachedCriteria criteria) {\n"
                + "        Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n"
                + "        try {\n"
                + "            session.getTransaction().begin();\n"
                + "            T entity = (T) criteria.getExecutableCriteria(session).uniqueResult();\n"
                + "            return entity;\n"
                + "        } catch (Exception e) {\n"
                + "            return null;\n"
                + "        } finally {\n"
                + "            session.getTransaction().commit();\n"
                + "            if (session.isOpen()) {\n"
                + "                session.close();\n"
                + "            }\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public List<T> getEntities() {\n"
                + "        Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n"
                + "        try {\n"
                + "            session.getTransaction().begin();\n"
                + "\n"
                + "            Criteria criteria = session.createCriteria(classe);\n"
                + "\n"
                + "            return criteria.list();\n"
                + "        } catch (Exception e) {\n"
                + "\n"
                + "            return null;\n"
                + "        } finally {\n"
                + "            session.getTransaction().commit();\n"
                + "            if (session.isOpen()) {\n"
                + "                session.close();\n"
                + "            }\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public List<T> getEntitiesTop(int top, String campo) {\n"
                + "        Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n"
                + "        try {\n"
                + "            session.getTransaction().begin();\n"
                + "\n"
                + "            Criteria criteria = session.createCriteria(classe)\n"
                + "                    .addOrder(Order.desc(campo))\n"
                + "                    .setMaxResults(top);\n"
                + "\n"
                + "            return criteria.list();\n"
                + "        } catch (Exception e) {\n"
                + "\n"
                + "            return null;\n"
                + "        } finally {\n"
                + "            session.getTransaction().commit();\n"
                + "            if (session.isOpen()) {\n"
                + "                session.close();\n"
                + "            }\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public List<T> getEntitiesByDetachetCriteria(DetachedCriteria criteria) {\n"
                + "        Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n"
                + "        try {\n"
                + "            session.getTransaction().begin();\n"
                + "            List<T> lista = (List<T>) session.createCriteria(classe).list();\n"
                + "            return criteria.getExecutableCriteria(session).list();\n"
                + "        } catch (Exception e) {\n"
                + "            return null;\n"
                + "        } finally {\n"
                + "            session.getTransaction().commit();\n"
                + "            if (session.isOpen()) {\n"
                + "                session.close();\n"
                + "            }\n"
                + "        }\n"
                + "\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public List<T> getEntitiesByQuery(String query) {\n"
                + "        Session session = HibernateUtil.getSessionFactory().getCurrentSession();\n"
                + "\n"
                + "        try {\n"
                + "            session.getTransaction().begin();\n"
                + "            SQLQuery sql = session.createSQLQuery(query).addEntity(classe.getClass());\n"
                + "            // SQLQuery sql = session.createSQLQuery(\"select *, lower(convert(`disponibilidadeTrabalho` using utf8)) from tbl_usuario WHERE lower(disponibilidadeTrabalho)  like '%feira%'\").addEntity(Usuario.class);\n"
                + "\n"
                + "            return sql.list();\n"
                + "        } catch (Exception e) {\n"
                + "\n"
                + "            return null;\n"
                + "        } finally {\n"
                + "            session.getTransaction().commit();\n"
                + "            if (session.isOpen()) {\n"
                + "                session.close();\n"
                + "            }\n"
                + "        }\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public void rollback(Session session) {\n"
                + "        session.getTransaction().rollback();\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public void begin(Session session) {\n"
                + "        session.getTransaction().begin();\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public Session getSession() {\n"
                + "        return HibernateUtil.getSessionFactory().getCurrentSession();\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public void commit(Session session) {\n"
                + "        session.getTransaction().commit();\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public List<T> getTop(int totalRest, String query) {\n"
                + "        throw new UnsupportedOperationException(\"Not supported yet.\"); //To change body of generated methods, choose Tools | Templates.\n"
                + "    }\n"
                + "\n"
                + "}\n"
                + "";
        //E:\Empresa\Softwares\bicus\bicus\src\main\java\com\sunrise\bicus
//        System.out.println(codigo);
        String caminho =System.getProperty("user.dir").concat(Config.getPATH_JAVA()+pacoteRaiz.replace(".", "\\").concat("\\").concat(pacote).concat("\\"));
//        System.out.println(caminho);
        new CriarArquivoJava().gerarFileJavaSubstituir(caminho, codigo, "Dao");
        
        System.out.println("//###############################################################################################");
        System.out.println("//####################### CONCLUÍDO  ############################################################");
        System.out.println("//###############################################################################################\n");

    }

}
